library SpiritWard requires ID, Table, PublicLibrary, Ascii {
  Table wardTable;

  function isWardReviving(unit u) -> boolean {
    return wardTable.has(GetHandleId(u));
  }

  function setWardStartedReviving(unit u) {
    wardTable.unit[GetHandleId(u)] = u;
  }

  function setWardStoppedReviving(unit u) {
    wardTable.remove(GetHandleId(u));
  }

	function onPlayerLeave() {
    group g = GetUnitsOfPlayerAndTypeId(GetTriggerPlayer(), UNIT_SPIRIT_WARD);
    unit u = GetPlayerTroll(GetTriggerPlayer());
    force f = GetPlayerTribe(GetTriggerPlayer());
    unit d;

    if (CountUnitsInGroup(g) >= 1) {
      d = FirstOfGroup(g);
      while (d != null) {
        SetUnitOwner(d, ForcePickRandomPlayer(f), false);
        GroupRemoveUnit(g, d);
        d = FirstOfGroup(g);
      }
    }

    DestroyGroup(g);

    g = null;
    f = null;
    u = null;
    d = null;
	}

  function onPlayerSelectWard() {
    if (GetUnitTypeId(GetTriggerUnit()) == UNIT_SPIRIT_WARD &&
        IsUnitAlly(GetTriggerUnit(), GetTriggerPlayer()) &&
        !isWardReviving(GetTriggerUnit())) {
      // debug BJDebugMsg("Ward select will change owner!");
      SetUnitOwner(GetTriggerUnit(), GetTriggerPlayer(), false);
    }
  }

  function onReviveStart() {
    group selected = CreateGroup();
    unit ward;

    // debug BJDebugMsg("Ward started reviving");

    GroupEnumUnitsSelected(selected, GetOwningPlayer(GetTriggerUnit()), Condition(function FilterUnitIsSpiritWard));
    ward = FirstOfGroup(selected);
    if (ward != null) {
      // debug BJDebugMsg("Ward started reviving success!");
      setWardStartedReviving(ward);
    }

    DestroyGroup(selected);

    selected = null;
    ward = null;
  }

  function onReviveCancel() {
    group selected = CreateGroup();
    unit ward;

    // debug BJDebugMsg("Ward cancelled reviving");

    GroupEnumUnitsSelected(selected, GetOwningPlayer(GetTriggerUnit()), Condition(function FilterUnitIsSpiritWard));
    ward = FirstOfGroup(selected);
    if (ward != null) {
      // debug BJDebugMsg("Ward cancel revive success!");
      setWardStoppedReviving(ward);
    }

    DestroyGroup(selected);

    selected = null;
    ward = null;
  }

  function onReviveFinish() {
    group g;
    unit d;
    integer handleId;

    SetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD, udg_MAX_HEAT);

    g = CreateGroup();

    GroupEnumUnitsInRangeOfLoc(g, GetUnitLoc(GetRevivingUnit()), 250, Condition(function FilterUnitIsSpiritWard));
    d = FirstOfGroup(g);
    if (d != null) {
      // debug BJDebugMsg("Ward finish revive success!");
      setWardStoppedReviving(d);
      handleId = GetHandleId(d);
      wardTable.unit[handleId] = d;
      TimerStart(NewTimerEx(handleId), 0, false, function() {
        integer handleId = GetTimerData(GetExpiredTimer());
        ReleaseTimer(GetExpiredTimer());
        SetWidgetLife(wardTable.unit[handleId], 0);
      });
    }

    DestroyGroup(g);

    g = null;
    d = null;
  }

	function onInit() {
		trigger leaveTrigger = CreateTrigger();
    trigger selectWardTrigger = CreateTrigger();
    trigger reviveStartTrigger = CreateTrigger();
    trigger reviveCancelTrigger = CreateTrigger();
    trigger reviveFinishTrigger = CreateTrigger();
		integer i;

    wardTable = Table.create();

		for (0 <= i < 12) {
      TriggerRegisterPlayerEventLeave(leaveTrigger, Player(i));
      TriggerRegisterPlayerUnitEvent(selectWardTrigger, Player(i), EVENT_PLAYER_UNIT_SELECTED, null);
      TriggerRegisterPlayerUnitEvent(reviveStartTrigger, Player(i), EVENT_PLAYER_HERO_REVIVE_START, null);
      TriggerRegisterPlayerUnitEvent(reviveCancelTrigger, Player(i), EVENT_PLAYER_HERO_REVIVE_CANCEL, null);
      TriggerRegisterPlayerUnitEvent(reviveFinishTrigger, Player(i), EVENT_PLAYER_HERO_REVIVE_FINISH, null);
		}

    TriggerAddAction(leaveTrigger, function onPlayerLeave);
    TriggerAddAction(selectWardTrigger, function onPlayerSelectWard);
    TriggerAddAction(reviveStartTrigger, function onReviveStart);
    TriggerAddAction(reviveCancelTrigger, function onReviveCancel);
    TriggerAddAction(reviveFinishTrigger, function onReviveFinish);

    leaveTrigger = null;
    selectWardTrigger = null;
    reviveStartTrigger = null;
    reviveCancelTrigger = null;
    reviveFinishTrigger = null;
	}
}
